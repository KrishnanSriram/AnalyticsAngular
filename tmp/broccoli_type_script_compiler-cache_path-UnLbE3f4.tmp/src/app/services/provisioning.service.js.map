{"version":3,"file":"provisioning.service.js","sourceRoot":"","sources":["../../home/krishnan/Projects/Javascript/Angular2/AnalyticsAngular/tmp/broccoli_type_script_compiler-input_base_path-q4vvevdI.tmp/0/src/app/services/provisioning.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA6B,eAAe,CAAC,CAAA;AAI7C;IAME,6BAAoB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;QAFrB,iBAAY,GAAW,WAAW,CAAC;QAGzC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,8BAA8B,CAAC;IAEvD,CAAC;IAEM,qCAAO,GAAd;QACE,EAAE,CAAA,CAAC,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAEO,6CAAe,GAAvB;QAAA,iBAUC;QATC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAEtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC;aACtC,GAAG,CAAC,UAAC,GAAY,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC;QAC9C,cAAc;QACd,kCAAkC;QAClC,+BAA+B;QAC/B,8BAA8B;QAC9B,KAAK;IACT,CAAC;IAEO,yCAAW,GAAnB,UAAoB,GAAa;QAC/B,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,yCAAW,GAAnB,UAAqB,KAAU;QAC7B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IA7CH;QAAC,iBAAU,EAAE;;2BAAA;IAoDb,0BAAC;AAAD,CAAC,AAnDD,IAmDC;AAnDY,2BAAmB,sBAmD/B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport {Http, Response} from \"@angular/http\";\nimport {Observable} from 'rxjs/Rx';\n\n@Injectable()\nexport class ProvisioningService {\n\n  public configType: string;\n  private configFilePath: string;\n  private _CONFIG_FILE: string = \"data.json\";\n\n  constructor(private http:Http) {\n    this.configType = \"HOME\";\n    this.configFilePath = \"app/data/json/home/data.json\";\n\n  }\n\n  public getData() : Observable<any> {\n    if(this.configType == \"HOME\") {\n      return this.getHomePageData();\n    }\n  }\n\n  private getHomePageData() : Observable<any> {\n    console.log('Get data for HOME page');\n\n    return this.http.get(this.configFilePath)\n      .map((res:Response) => this.extractData(res));\n      // .subscribe(\n      //   data => { console.dir(data)},\n      //   err => console.error(err),\n      //   () => console.log('done')\n      // );\n  }\n\n  private extractData(res: Response) {\n    console.log('Extract data');\n    let body = res.json();\n    console.dir(body);\n    return body;\n  }\n\n  private handleError (error: any) {\n    // In a real world app, we might use a remote logging infrastructure\n    // We'd also dig deeper into the error to get a better message\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // log to console instead\n    return Promise.reject(errMsg);\n  }\n\n  /*\n  Allow for different type of parameters to be passed in. Like HOME, ABOUT, CONTACTS etc. Based on the\n  parameters we will load and return appropriate config file\n  */\n\n}\n"]}