{"version":3,"file":"channelservice.service.js","sourceRoot":"","sources":["../../Users/krishnansriram/Projects/Javascript/Angular2/AnalyticsAngular/tmp/broccoli_type_script_compiler-input_base_path-NfriMv8x.tmp/0/src/app/channels/channelservice.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Channel} from \"./channel\";\nimport {Http, Response, Headers} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class ChannelService {\n    //TODO: this should be moved into a configuration file, and should be used across the application.\n    // private BASE_URL = \"http://localhost:3000/api/\";\n    private BASE_URL = \"http://personalanalytics.mybluemix.net/api/\";\n    private CHANNEL_LIST = this.BASE_URL + \"channels\";\n    private headers: Headers;\n\n    constructor(private http: Http) {\n        this.headers = new Headers();\n        this.headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        // this.headers.append('Access-Control-Allow-Origin', '*');\n    }\n\n\n    getChannels(): Observable<any> {\n        return this.http.get(this.CHANNEL_LIST, this.headers)\n            .map((res: Response) => res.json())\n            .catch(this.handleError);\n    }\n\n    /**\n     * Handle HTTP error\n     */\n    private handleError(error: any) {\n        // In a real world app, we might use a remote logging infrastructure\n        // We'd also dig deeper into the error to get a better message\n        let errMsg = (error.message) ? error.message :\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n\n    addNewChannel(channel: Channel): Observable<any> {\n        console.log(\"addNewChannel for new channel\");\n        var channelJSON = channel.toJSON();\n        console.log(channelJSON);\n        return this.http.post(this.CHANNEL_LIST, channelJSON)\n            .map(res => res.json())\n            .catch(this.handleError);\n    }\n\n    editChannel(channel: Channel) {\n        console.log(\"editChannel\")\n        // this should return an observable\n    }\n\n    updateChannel(channel: Channel) {\n        console.log(\"updateChannel in Channel\")\n        let url = this.CHANNEL_LIST + \"/\" + channel._id;\n        var channelJSON = channel.toJSON();\n        console.log('UpdateChannel JSON: ');\n        console.dir(channelJSON);\n        return this.http.put(url, channelJSON)\n            .map(res => res.json())\n            .catch(this.handleError);\n    }\n\n    deleteChannel(channel: Channel) {\n        console.log(\"deleteChannel\")\n        // this should return an observable\n    }\n\n    findChannel() {\n        console.log(\"getChannelList\")\n        // this should return an observable\n    }\n\n}"]}