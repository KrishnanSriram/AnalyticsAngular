{"version":3,"file":"login.component.js","sourceRoot":"","sources":["../../Users/krishnansriramrama/PrivateProjects/Angular2/personal_analytics_web/tmp/broccoli_type_script_compiler-input_base_path-BtsPIkJ4.tmp/0/src/app/login/login.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAClD,sBAAsE,gBAAgB,CAAC,CAAA;AACvF,uBAA+E,iBAAiB,CAAC,CAAA;AAOjG;IAqBE,wBAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAnBlC,iBAAY,GAAG;YACb,cAAc,EAAE,kBAAkB;YAClC,kBAAkB,EAAE,kCAAkC;SACvD,CAAC;QAEF,mBAAc,GAAG;YACf,OAAO,EAAE,EAAE;YACX,UAAU,EAAE,EAAE;SACf,CAAC;QAEF,cAAS,GAAG,IAAI,iBAAS,CAAC;YACtB,oMAAoM;YACpM,KAAK,EAAE,IAAI,mBAAW,CAAC,EAAE,EAAC;gBACxB,kBAAU,CAAC,QAAQ;gBACnB,kBAAU,CAAC,OAAO,CAAC,qEAAqE,CAAC;aAC1F,CAAC;YACF,QAAQ,EAAE,IAAI,mBAAW,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;SACnD,CAAC,CAAC;IAGL,CAAC;IAED,iCAAQ,GAAR;IACA,CAAC;IAED,gCAAO,GAAP;QACE,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAEnC,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC;YACjC,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;gBACpD,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YAC/D,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC;YACtE,CAAC;YAED,MAAM,CAAC;QACT,CAAC;QAED,aAAa;QACb,mBAAmB;QACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;IACtC,CAAC;IAjDH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,sBAAsB;SACpC,CAAC;;sBAAA;IA+CF,qBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,sBAAc,iBA8C1B,CAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormGroup, FormControl, Validators, ReactiveFormsModule} from \"@angular/forms\";\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-login',\n  templateUrl: 'login.component.html',\n})\nexport class LoginComponent implements OnInit {\n\n  CLIENT_ERROR = {\n    loginNameError: 'Invalid login ID',\n    loginPasswordError: 'Missing or non-matching password'\n  };\n\n  loginFormError = {\n    'email': '',\n    'password': ''\n  };\n\n  loginForm = new FormGroup({\n      //Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b\")\n      email: new FormControl('',[\n        Validators.required,\n        Validators.pattern(\"^[a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,15})$\")\n      ]),\n      password: new FormControl('', Validators.required)\n    });\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit() {\n  }\n\n  onLogin() {\n    console.log('Login button tapped');\n\n    if(this.loginForm.valid == false) {\n      if(this.loginForm.controls['email'].invalid == true) {\n        this.loginFormError.email = this.CLIENT_ERROR.loginNameError;\n      }\n      if (this.loginForm.controls['password'].invalid == true) {\n        this.loginFormError.password = this.CLIENT_ERROR.loginPasswordError;\n      }\n\n      return;\n    }\n\n    // valid form\n    // Proceed to login\n    this.router.navigate(['/channels']);\n  }\n\n}\n"]}